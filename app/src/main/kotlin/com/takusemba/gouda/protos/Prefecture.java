// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: prefectures.proto
package com.takusemba.gouda.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Prefecture extends Message<Prefecture, Prefecture.Builder> {
  public static final ProtoAdapter<Prefecture> ADAPTER = new ProtoAdapter_Prefecture();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_ROMAJI = "";

  /**
   * ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long id;

  /**
   * 名前
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  /**
   * 読み方（ローマ字）
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String romaji;

  public Prefecture(Long id, String name, String romaji) {
    this(id, name, romaji, ByteString.EMPTY);
  }

  public Prefecture(Long id, String name, String romaji, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.name = name;
    this.romaji = romaji;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.name = name;
    builder.romaji = romaji;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Prefecture)) return false;
    Prefecture o = (Prefecture) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(name, o.name)
        && Internal.equals(romaji, o.romaji);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (romaji != null ? romaji.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (name != null) builder.append(", name=").append(name);
    if (romaji != null) builder.append(", romaji=").append(romaji);
    return builder.replace(0, 2, "Prefecture{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Prefecture, Builder> {
    public Long id;

    public String name;

    public String romaji;

    public Builder() {
    }

    /**
     * ID
     */
    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 名前
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * 読み方（ローマ字）
     */
    public Builder romaji(String romaji) {
      this.romaji = romaji;
      return this;
    }

    @Override
    public Prefecture build() {
      return new Prefecture(id, name, romaji, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Prefecture extends ProtoAdapter<Prefecture> {
    public ProtoAdapter_Prefecture() {
      super(FieldEncoding.LENGTH_DELIMITED, Prefecture.class);
    }

    @Override
    public int encodedSize(Prefecture value) {
      return ProtoAdapter.INT64.encodedSizeWithTag(1, value.id)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.name)
          + ProtoAdapter.STRING.encodedSizeWithTag(3, value.romaji)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Prefecture value) throws IOException {
      ProtoAdapter.INT64.encodeWithTag(writer, 1, value.id);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name);
      ProtoAdapter.STRING.encodeWithTag(writer, 3, value.romaji);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Prefecture decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.romaji(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Prefecture redact(Prefecture value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
